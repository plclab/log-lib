FUNCTION "CreateBufferHandle" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      BufferSize : DInt;
   END_VAR

   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      byteOrderInt : Int;
      byteOrderArray AT byteOrderInt : Array[0..1] OF Byte;
      i : DInt;
   END_VAR


BEGIN
	#Handle.BufferSize := #BufferSize;
	#Handle.BufferEnd := #BufferSize - 1;
	
	#byteOrderInt := 1;
	IF #byteOrderArray[0] = 1 THEN
	    #Handle.MagicByte := 112;
	ELSE
	    #Handle.MagicByte := 113;
	END_IF;
	
	IF #Handle.BufferFull THEN
	
	#i := "GetNextWritePointer"(Length := 4, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 1;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	    #Handle.BufferFull := FALSE;
	
	END_IF;
	
	END_IF;
END_FUNCTION

FUNCTION "GetNextWritePointer" : Dint
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      Length : DInt;
      WritePointer : DInt;
      ReadPointer : DInt;
      BufferSize : DInt;
   END_VAR

   VAR_IN_OUT
      Overflow : DInt;
   END_VAR
   

BEGIN
	#GetNextWritePointer := -1;
	IF #WritePointer >= #ReadPointer THEN
	    IF #WritePointer + #Length >= #BufferSize THEN
	        IF #ReadPointer >= #Length THEN
	            #Overflow := #WritePointer;
	            #GetNextWritePointer := 0;
	        END_IF;
	    ELSE
	        #GetNextWritePointer := #WritePointer + 1;
	    END_IF;
	ELSIF #ReadPointer - #WritePointer > #Length THEN
	    #GetNextWritePointer := #WritePointer + 1;
	END_IF;
END_FUNCTION

FUNCTION "EvtNull" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      i : DInt;
   END_VAR


BEGIN
	#i := "GetNextWritePointer"(Length := 8, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 0;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	ELSE
	    #Handle.BufferFull := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "EvtCh16Tick32Bool8" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      Channel : Int;
      Tick : DInt;
      Value : Bool;
   END_VAR

   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      i : DInt;
      p2 : Int;
      p2Bytes AT p2 : Array[0..1] of Byte;
      p3 : DInt;
      p3Bytes AT p3 : Array[0..3] of Byte;
   END_VAR


BEGIN
	#i := "GetNextWritePointer"(Length := 15, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 70;
	
	    #p2 := #Channel;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[1];
	
	    #p3 := #Tick;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[3];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := BOOL_TO_BYTE(#Value);
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	ELSE
	    #Handle.BufferFull := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "EvtCh16Tick32Int32" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      Channel : Int;
      Tick : DInt;
      Value : Dint;
   END_VAR

   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      i : DInt;
      p2 : Int;
      p2Bytes AT p2 : Array[0..1] of Byte;
      p3 : DInt;
      p3Bytes AT p3 : Array[0..3] of Byte;
      p4 : Dint;
      p4Bytes AT p4 : Array[0..3] of Byte;
   END_VAR


BEGIN
	#i := "GetNextWritePointer"(Length := 18, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 122;
	
	    #p2 := #Channel;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[1];
	
	    #p3 := #Tick;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[3];
	
	    #p4 := #Value;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[3];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	ELSE
	    #Handle.BufferFull := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "EvtCh16Tick32Real32" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      Channel : Int;
      Tick : DInt;
      Value : Real;
   END_VAR

   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      i : DInt;
      p2 : Int;
      p2Bytes AT p2 : Array[0..1] of Byte;
      p3 : DInt;
      p3Bytes AT p3 : Array[0..3] of Byte;
      p4 : Real;
      p4Bytes AT p4 : Array[0..3] of Byte;
   END_VAR


BEGIN
	#i := "GetNextWritePointer"(Length := 18, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 124;
	
	    #p2 := #Channel;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[1];
	
	    #p3 := #Tick;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[3];
	
	    #p4 := #Value;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[3];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	ELSE
	    #Handle.BufferFull := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "EvtGr8Id8Ch16Tick32Bool8" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      Group : Byte;
      Id : Byte;
      Channel : Int;
      Tick : DInt;
      Value : Bool;
   END_VAR

   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      i : DInt;
      p2 : Int;
      p2Bytes AT p2 : Array[0..1] of Byte;
      p3 : DInt;
      p3Bytes AT p3 : Array[0..3] of Byte;
   END_VAR


BEGIN
	#i := "GetNextWritePointer"(Length := 17, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 100;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Group;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := Id;
	
	    #p2 := #Channel;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[1];
	
	    #p3 := #Tick;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[3];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := BOOL_TO_BYTE(#Value);
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	ELSE
	    #Handle.BufferFull := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "EvtGr8Id8Ch16Tick32Int32" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      Group : Byte;
      Id : Byte;
      Channel : Int;
      Tick : DInt;
      Value : Dint;
   END_VAR

   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      i : DInt;
      p2 : Int;
      p2Bytes AT p2 : Array[0..1] of Byte;
      p3 : DInt;
      p3Bytes AT p3 : Array[0..3] of Byte;
      p4 : Dint;
      p4Bytes AT p4 : Array[0..3] of Byte;
   END_VAR


BEGIN
	#i := "GetNextWritePointer"(Length := 20, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 154;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Group;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := Id;
	
	    #p2 := #Channel;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[1];
	
	    #p3 := #Tick;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[3];
	
	    #p4 := #Value;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[3];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	ELSE
	    #Handle.BufferFull := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "EvtGr8Id8Ch16Tick32Real32" : Void
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      Group : Byte;
      Id : Byte;
      Channel : Int;
      Tick : DInt;
      Value : Real;
   END_VAR

   VAR_IN_OUT
      Handle : "LogBuffer";
   END_VAR
   
   VAR_TEMP 
      i : DInt;
      p2 : Int;
      p2Bytes AT p2 : Array[0..1] of Byte;
      p3 : DInt;
      p3Bytes AT p3 : Array[0..3] of Byte;
      p4 : Real;
      p4Bytes AT p4 : Array[0..3] of Byte;
   END_VAR


BEGIN
	#i := "GetNextWritePointer"(Length := 20, WritePointer := #Handle.BufferWritePointer, ReadPointer := #Handle.BufferReadPointer, BufferSize := #Handle.BufferSize, Overflow := #Handle.BufferOverflow);
	IF #i >= 0 THEN
	
	    #Handle.Buffer[#i] := 255;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Handle.MagicByte;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 156;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #Group;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := Id;
	
	    #p2 := #Channel;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p2Bytes[1];
	
	    #p3 := #Tick;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p3Bytes[3];
	
	    #p4 := #Value;
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[0];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[1];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[2];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := #p4Bytes[3];
	
	    #i := #i + 1;
	    #Handle.Buffer[#i] := 254;
	
	    #Handle.BufferWritePointer := #i;
	
	ELSE
	    #Handle.BufferFull := TRUE;
	END_IF;
END_FUNCTION

