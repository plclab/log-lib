
(* @NESTEDCOMMENTS := 'No' *)
(* @PATH := '\/core\/evt' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION EvtCh16Tick32Int32 : BOOL
VAR_INPUT
    Channel: UINT;
    Tick: UDINT;
    Value: DINT;
END_VAR
VAR_IN_OUT
    Handle: LogBufferHandle;
END_VAR
VAR
    full: BOOL;
    start: DWORD;
    end: DWORD;
    p1: POINTER TO BYTE;
    p2: POINTER TO BYTE;
    p3: POINTER TO UDINT;
    p4: POINTER TO DINT;
END_VAR
(* @END_DECLARATION := '0' *)
IF Handle.BufferWritePointer >= Handle.BufferReadPointer THEN
    full := Handle.BufferSize - (Handle.BufferWritePointer - Handle.BufferReadPointer) < 14;
ELSE
    full := Handle.BufferSize - (Handle.BufferSize + (Handle.BufferWritePointer - Handle.BufferReadPointer)) < 14;
END_IF

IF NOT full THEN

    start := Handle.BufferAddress;
    end := Handle.BufferEndAddress;
    p1 := start + Handle.BufferWritePointer;

    IF p1 + 14 < end THEN

        p1 := p1 + 1;
        p1^ := START_FLAG;

        p1 := p1 + 1;
        p1^ := Handle.MagicByte;

        p1 := p1 + 1;
        p1^ := EVT_CH16_TICK32_INT32;

        p1 := p1 + 1;
        p2 := ADR(Channel);
        p1^ := p2^;

        p1 := p1 + 1;
        p2 := p2 + 1;
        p1^ := p2^;

        p3 := p1 + 1;
        p3^ := Tick;

        p4 := p1 + 5;
        p4^ := Value;

        p1 := p1 + 9;
        p1^ := END_FLAG;

    ELSE

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p1^ := START_FLAG;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p1^ := Handle.MagicByte;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p1^ := EVT_CH16_TICK32_INT32;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := ADR(Channel);
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := p2 + 1;
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := ADR(Tick);
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := p2 + 1;
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := p2 + 1;
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := p2 + 1;
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := ADR(Value);
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := p2 + 1;
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := p2 + 1;
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p2 := p2 + 1;
        p1^ := p2^;

        IF p1 < end THEN p1 := p1 + 1; ELSE p1 := start; END_IF
        p1^ := END_FLAG;

    END_IF

    Handle.BufferWritePointer := DWORD_TO_DINT(p1 - start);

END_IF
END_FUNCTION
